// SPDX-License-Identifier: MIT
// Copyright: 2023 Econolite Systems, Inc.
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace Weather.Gov.Models
{
    

    /// <summary>An object representing a public alert message.
    /// Unless otherwise noted, the fields in this object correspond to the National Weather Service CAP v1.2 specification, which extends the OASIS Common Alerting Protocol (CAP) v1.2 specification and USA Integrated Public Alert and Warning System (IPAWS) Profile v1.0. Refer to this documentation for more complete information.
    /// http://docs.oasis-open.org/emergency/cap/v1.2/CAP-v1.2-os.html http://docs.oasis-open.org/emergency/cap/v1.2/ipaws-profile/v1.0/cs01/cap-v1.2-ipaws-profile-cs01.html https://alerts.weather.gov/#technical-notes-v12
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Alert 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>A textual description of the area affected by the alert.</summary>
        [Newtonsoft.Json.JsonProperty("areaDesc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AreaDesc { get; set; }
    
        /// <summary>Lists of codes for NWS public zones and counties affected by the alert.</summary>
        [Newtonsoft.Json.JsonProperty("geocode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Geocode Geocode { get; set; }
    
        /// <summary>An array of API links for zones affected by the alert. This is an API-specific extension field and is not part of the CAP specification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("affectedZones", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Uri> AffectedZones { get; set; }
    
        /// <summary>A list of prior alerts that this alert updates or replaces.</summary>
        [Newtonsoft.Json.JsonProperty("references", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<References> References { get; set; }
    
        /// <summary>The time of the origination of the alert message.</summary>
        [Newtonsoft.Json.JsonProperty("sent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Sent { get; set; }
    
        /// <summary>The effective time of the information of the alert message.</summary>
        [Newtonsoft.Json.JsonProperty("effective", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Effective { get; set; }
    
        /// <summary>The expected time of the beginning of the subject event of the alert message.</summary>
        [Newtonsoft.Json.JsonProperty("onset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Onset { get; set; }
    
        /// <summary>The expiry time of the information of the alert message.</summary>
        [Newtonsoft.Json.JsonProperty("expires", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Expires { get; set; }
    
        /// <summary>The expected end time of the subject event of the alert message.</summary>
        [Newtonsoft.Json.JsonProperty("ends", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Ends { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlertStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("messageType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlertMessageType MessageType { get; set; }
    
        /// <summary>The code denoting the category of the subject event of the alert message.</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlertCategory Category { get; set; }
    
        [Newtonsoft.Json.JsonProperty("severity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlertSeverity Severity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("certainty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlertCertainty Certainty { get; set; }
    
        [Newtonsoft.Json.JsonProperty("urgency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlertUrgency Urgency { get; set; }
    
        /// <summary>The text denoting the type of the subject event of the alert message.</summary>
        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Event { get; set; }
    
        /// <summary>Email address of the NWS webmaster.</summary>
        [Newtonsoft.Json.JsonProperty("sender", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sender { get; set; }
    
        /// <summary>The text naming the originator of the alert message.</summary>
        [Newtonsoft.Json.JsonProperty("senderName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenderName { get; set; }
    
        /// <summary>The text headline of the alert message.</summary>
        [Newtonsoft.Json.JsonProperty("headline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Headline { get; set; }
    
        /// <summary>The text describing the subject event of the alert message.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>The text describing the recommended action to be taken by recipients of the alert message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instruction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instruction { get; set; }
    
        /// <summary>The code denoting the type of action recommended for the target audience.
        /// This corresponds to responseType in the CAP specification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlertResponse Response { get; set; }
    
        /// <summary>System-specific additional parameters associated with the alert message.
        /// The keys in this object correspond to parameter definitions in the NWS CAP specification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<object>> Parameters { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AlertCollection 
    {
        /// <summary>A title describing the alert collection</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        /// <summary>The last time a change occurred to this collection</summary>
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }
    
        /// <summary>Links for retrieving more data</summary>
        [Newtonsoft.Json.JsonProperty("pagination", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pagination Pagination { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AlertCollectionGeoJson : GeoJsonFeatureCollection
    {
        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Features> Features { get; set; }
    
        /// <summary>A title describing the alert collection</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        /// <summary>The last time a change occurred to this collection</summary>
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }
    
        /// <summary>Links for retrieving more data</summary>
        [Newtonsoft.Json.JsonProperty("pagination", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pagination Pagination { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AlertCollectionJsonLd : AlertCollection
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonLdContext Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@graph", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert> Graph { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AlertCap 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AlertGeoJson : GeoJsonFeature
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Alert Properties { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AlertJsonLd 
    {
        [Newtonsoft.Json.JsonProperty("@graph", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert> Graph { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AlertCertainty
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Observed")]
        Observed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Likely")]
        Likely = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Possible")]
        Possible = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unlikely")]
        Unlikely = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AlertMessageType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Alert")]
        Alert = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cancel")]
        Cancel = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ack")]
        Ack = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AlertSeverity
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Extreme")]
        Extreme = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Severe")]
        Severe = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Moderate")]
        Moderate = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Minor")]
        Minor = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AlertStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Actual")]
        Actual = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Exercise")]
        Exercise = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"System")]
        System = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Test")]
        Test = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AlertUrgency
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Immediate")]
        Immediate = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Expected")]
        Expected = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Future")]
        Future = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Past")]
        Past = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 4,
    
    }
    
    /// <summary>An alert entry in an Atom feed</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AlertAtomEntry 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("published", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Published { get; set; }
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Author Author { get; set; }
    
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Summary { get; set; }
    
        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Event { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("effective", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Effective { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expires", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expires { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("msgType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MsgType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }
    
        [Newtonsoft.Json.JsonProperty("urgency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Urgency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("severity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Severity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("certainty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Certainty { get; set; }
    
        [Newtonsoft.Json.JsonProperty("areaDesc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AreaDesc { get; set; }
    
        [Newtonsoft.Json.JsonProperty("polygon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Polygon { get; set; }
    
        [Newtonsoft.Json.JsonProperty("geocode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AlertXMLParameter> Geocode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AlertXMLParameter> Parameter { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AlertXMLParameter 
    {
        [Newtonsoft.Json.JsonProperty("valueName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValueName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>An alert feed in Atom format</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AlertAtomFeed 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("generator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Generator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Author2 Author { get; set; }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        [Newtonsoft.Json.JsonProperty("entry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AlertAtomEntry> Entry { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AreaCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"AL")]
        AL = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AK")]
        AK = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AS")]
        AS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AR")]
        AR = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AZ")]
        AZ = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CO")]
        CO = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CT")]
        CT = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DE")]
        DE = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DC")]
        DC = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FL")]
        FL = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GA")]
        GA = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GU")]
        GU = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HI")]
        HI = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ID")]
        ID = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IL")]
        IL = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN")]
        IN = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IA")]
        IA = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KS")]
        KS = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KY")]
        KY = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LA")]
        LA = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ME")]
        ME = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MD")]
        MD = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MA")]
        MA = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MI")]
        MI = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MN")]
        MN = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MS")]
        MS = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MO")]
        MO = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MT")]
        MT = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NE")]
        NE = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NV")]
        NV = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NH")]
        NH = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NJ")]
        NJ = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NM")]
        NM = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NY")]
        NY = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NC")]
        NC = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ND")]
        ND = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OH")]
        OH = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OK")]
        OK = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OR")]
        OR = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PA")]
        PA = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PR")]
        PR = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RI")]
        RI = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SC")]
        SC = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SD")]
        SD = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TN")]
        TN = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TX")]
        TX = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UT")]
        UT = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VT")]
        VT = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VI")]
        VI = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VA")]
        VA = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WA")]
        WA = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WV")]
        WV = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WI")]
        WI = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WY")]
        WY = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MP")]
        MP = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PW")]
        PW = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FM")]
        FM = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MH")]
        MH = 58,
    
    }
    
    /// <summary>A GeoJSON bounding box. Please refer to IETF RFC 7946 for information on the GeoJSON format.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GeoJsonBoundingBox : System.Collections.ObjectModel.Collection<double>
    {
    
    }
    
    /// <summary>A GeoJSON coordinate. Please refer to IETF RFC 7946 for information on the GeoJSON format.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GeoJsonCoordinate : System.Collections.ObjectModel.Collection<double>
    {
    
    }
    
    /// <summary>A GeoJSON geometry object. Please refer to IETF RFC 7946 for information on the GeoJSON format.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GeoJsonGeometry 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>A GeoJSON feature. Please refer to IETF RFC 7946 for information on the GeoJSON format.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GeoJsonFeature 
    {    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Id { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GeoJsonFeatureType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Properties { get; set; } = new object();


    }
    
    /// <summary>A GeoJSON feature collection. Please refer to IETF RFC 7946 for information on the GeoJSON format.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GeoJsonFeatureCollection 
    {    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GeoJsonFeatureCollectionType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<GeoJsonFeature> Features { get; set; } = new System.Collections.ObjectModel.Collection<GeoJsonFeature>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>A GeoJSON line string. Please refer to IETF RFC 7946 for information on the GeoJSON format.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GeoJsonLineString : System.Collections.ObjectModel.Collection<GeoJsonCoordinate>
    {
    
    }
    
    /// <summary>A GeoJSON polygon. Please refer to IETF RFC 7946 for information on the GeoJSON format.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GeoJsonPolygon : System.Collections.ObjectModel.Collection<System.Collections.ObjectModel.Collection<GeoJsonCoordinate>>
    {
    
    }
    
    /// <summary>Raw forecast data for a 2.5km grid square.
    /// This is a list of all potential data layers that may appear. Some layers may not be present in all areas.
    /// * temperature
    /// * dewpoint
    /// * maxTemperature
    /// * minTemperature
    /// * relativeHumidity
    /// * apparentTemperature
    /// * heatIndex
    /// * windChill
    /// * skyCover
    /// * windDirection
    /// * windSpeed
    /// * windGust
    /// * weather
    /// * hazards: Watch and advisory products in effect
    /// * probabilityOfPrecipitation
    /// * quantitativePrecipitation
    /// * iceAccumulation
    /// * snowfallAmount
    /// * snowLevel
    /// * ceilingHeight
    /// * visibility
    /// * transportWindSpeed
    /// * transportWindDirection
    /// * mixingHeight
    /// * hainesIndex
    /// * lightningActivityLevel
    /// * twentyFootWindSpeed
    /// * twentyFootWindDirection
    /// * waveHeight
    /// * wavePeriod
    /// * waveDirection
    /// * primarySwellHeight
    /// * primarySwellDirection
    /// * secondarySwellHeight
    /// * secondarySwellDirection
    /// * wavePeriod2
    /// * windWaveHeight
    /// * dispersionIndex
    /// * pressure: Barometric pressure
    /// * probabilityOfTropicalStormWinds
    /// * probabilityOfHurricaneWinds
    /// * potentialOf15mphWinds
    /// * potentialOf25mphWinds
    /// * potentialOf35mphWinds
    /// * potentialOf45mphWinds
    /// * potentialOf20mphWindGusts
    /// * potentialOf30mphWindGusts
    /// * potentialOf40mphWindGusts
    /// * potentialOf50mphWindGusts
    /// * potentialOf60mphWindGusts
    /// * grasslandFireDangerIndex
    /// * probabilityOfThunder
    /// * davisStabilityIndex
    /// * atmosphericDispersionIndex
    /// * lowVisibilityOccurrenceRiskIndex
    /// * stability
    /// * redFlagThreatIndex
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Gridpoint 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonLdContext Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("geometry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Geometry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GridpointType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset UpdateTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("validTimes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValidTimes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("elevation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue Elevation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("forecastOffice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri ForecastOffice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gridId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GridId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gridX", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int GridX { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gridY", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int GridY { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weather", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weather Weather { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hazards", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Hazards Hazards { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>A gridpoint layer consisting of quantitative values (numeric values with associated units of measure).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GridpointQuantitativeValueLayer 
    {
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom { get; set; }
    
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Values> Values { get; set; } = new System.Collections.ObjectModel.Collection<Values>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GridpointGeoJson : GeoJsonFeature
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Gridpoint Properties { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>A multi-day forecast for a 2.5km grid square.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GridpointForecast 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonLdContext Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("geometry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Geometry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GridpointForecastUnits Units { get; set; }
    
        /// <summary>The internal generator class used to create the forecast text (used for NWS debugging).</summary>
        [Newtonsoft.Json.JsonProperty("forecastGenerator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ForecastGenerator { get; set; }
    
        /// <summary>The time this forecast data was generated.</summary>
        [Newtonsoft.Json.JsonProperty("generatedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset GeneratedAt { get; set; }
    
        /// <summary>The last update time of the data this forecast was generated from.</summary>
        [Newtonsoft.Json.JsonProperty("updateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset UpdateTime { get; set; }
    
        /// <summary>This property is deprecated (use updateTime instead).</summary>
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("validTimes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValidTimes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("elevation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue Elevation { get; set; }
    
        /// <summary>An array of forecast periods.</summary>
        [Newtonsoft.Json.JsonProperty("periods", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GridpointForecastPeriod> Periods { get; set; }
    
    
    }
    
    /// <summary>An object containing forecast information for a specific time period (generally 12-hour or 1-hour).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GridpointForecastPeriod 
    {
        /// <summary>Sequential period number.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Number { get; set; }
    
        /// <summary>A textual identifier for the period. This value will not be present for hourly forecasts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The starting time that this forecast period is valid for.</summary>
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset StartTime { get; set; }
    
        /// <summary>The ending time that this forecast period is valid for.</summary>
        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EndTime { get; set; }
    
        /// <summary>Indicates whether this period is daytime or nighttime.</summary>
        [Newtonsoft.Json.JsonProperty("isDaytime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDaytime { get; set; }
    
        /// <summary>High/low temperature for the period, depending on whether the period is day or night.
        /// This property as an integer value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the "forecast_temperature_qv" feature flag on the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("temperature", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue Temperature { get; set; }
    
        /// <summary>The unit of the temperature value (Fahrenheit or Celsius).
        /// This property is deprecated. Future versions will indicate the unit within the quantitative value object for the temperature property. To make use of the future standard format now, set the "forecast_temperature_qv" feature flag on the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("temperatureUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GridpointForecastPeriodTemperatureUnit TemperatureUnit { get; set; }
    
        /// <summary>If not null, indicates a non-diurnal temperature trend for the period (either rising temperature overnight, or falling temperature during the day)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("temperatureTrend", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GridpointForecastPeriodTemperatureTrend? TemperatureTrend { get; set; }
    
        /// <summary>Wind speed for the period.
        /// This property as an string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the "forecast_wind_speed_qv" feature flag on the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("windSpeed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue WindSpeed { get; set; }
    
        /// <summary>Peak wind gust for the period.
        /// This property as an string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the "forecast_wind_speed_qv" feature flag on the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("windGust", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue WindGust { get; set; }
    
        /// <summary>The prevailing direction of the wind for the period, using a 16-point compass.</summary>
        [Newtonsoft.Json.JsonProperty("windDirection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GridpointForecastPeriodWindDirection WindDirection { get; set; }
    
        /// <summary>A link to an icon representing the forecast summary.</summary>
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Icon { get; set; }
    
        /// <summary>A brief textual forecast summary for the period.</summary>
        [Newtonsoft.Json.JsonProperty("shortForecast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortForecast { get; set; }
    
        /// <summary>A detailed textual forecast for the period.</summary>
        [Newtonsoft.Json.JsonProperty("detailedForecast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedForecast { get; set; }
    
    
    }
    
    /// <summary>Denotes the units used in the textual portions of the forecast.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum GridpointForecastUnits
    {
        [System.Runtime.Serialization.EnumMember(Value = @"us")]
        Us = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"si")]
        Si = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GridpointForecastGeoJson : GeoJsonFeature
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GridpointForecast Properties { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GridpointForecastJsonLd : GridpointForecast
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.Always)]
        public JsonLdContext Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("geometry", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Geometry { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ISO8601Interval 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonLdContext 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Land region code. These correspond to the six NWS regional headquarters:
    /// * AR: Alaska Region
    /// * CR: Central Region
    /// * ER: Eastern Region
    /// * PR: Pacific Region
    /// * SR: Southern Region
    /// * WR: Western Region
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum LandRegionCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"AR")]
        AR = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CR")]
        CR = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ER")]
        ER = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PR")]
        PR = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SR")]
        SR = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WR")]
        WR = 5,
    
    }
    
    /// <summary>Marine area code as defined in NWS Directive 10-302:
    /// * AM: Western North Atlantic Ocean and along U.S. East Coast south of Currituck Beach Light NC following the coastline into Gulf of Mexico to Ocean Reef FL including the Caribbean
    /// * AN: Western North Atlantic Ocean and along U.S. East Coast from Canadian border south to Currituck Beach Light NC
    /// * GM: Gulf of Mexico and along the U.S. Gulf Coast from the Mexican border to Ocean Reef FL
    /// * LC: Lake St. Clair
    /// * LE: Lake Erie
    /// * LH: Lake Huron
    /// * LM: Lake Michigan
    /// * LO: Lake Ontario
    /// * LS: Lake Superior
    /// * PH: Central Pacific Ocean including Hawaiian waters
    /// * PK: North Pacific Ocean near Alaska and along Alaska coastline including the Bering Sea and the Gulf of Alaska
    /// * PM: Western Pacific Ocean including Mariana Island waters
    /// * PS: South Central Pacific Ocean including American Samoa waters
    /// * PZ: Eastern North Pacific Ocean and along U.S. West Coast from Canadian border to Mexican border
    /// * SL: St. Lawrence River above St. Regis
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MarineAreaCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"AM")]
        AM = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AN")]
        AN = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GM")]
        GM = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LC")]
        LC = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LE")]
        LE = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LH")]
        LH = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LM")]
        LM = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LO")]
        LO = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LS")]
        LS = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PH")]
        PH = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PK")]
        PK = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PM")]
        PM = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PS")]
        PS = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PZ")]
        PZ = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SL")]
        SL = 14,
    
    }
    
    /// <summary>Marine region code. These are groups of marine areas combined.
    /// * AL: Alaska waters (PK)
    /// * AT: Atlantic Ocean (AM, AN)
    /// * GL: Great Lakes (LC, LE, LH, LM, LO, LS, SL)
    /// * GM: Gulf of Mexico (GM)
    /// * PA: Eastern Pacific Ocean and U.S. West Coast (PZ)
    /// * PI: Central and Western Pacific (PH, PM, PS)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MarineRegionCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"AL")]
        AL = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AT")]
        AT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GL")]
        GL = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GM")]
        GM = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PA")]
        PA = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PI")]
        PI = 5,
    
    }
    
    /// <summary>An object representing a decoded METAR phenomenon string.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MetarPhenomenon 
    {
        [Newtonsoft.Json.JsonProperty("intensity", Required = Newtonsoft.Json.Required.AllowNull)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MetarPhenomenonIntensity? Intensity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifier", Required = Newtonsoft.Json.Required.AllowNull)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MetarPhenomenonModifier? Modifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weather", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MetarPhenomenonWeather Weather { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rawString", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RawString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("inVicinity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool InVicinity { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MetarSkyCoverage
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OVC")]
        OVC = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BKN")]
        BKN = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SCT")]
        SCT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FEW")]
        FEW = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SKC")]
        SKC = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLR")]
        CLR = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VV")]
        VV = 6,
    
    }
    
    /// <summary>Three-letter identifier for a NWS office.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum NWSForecastOfficeId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"AKQ")]
        AKQ = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ALY")]
        ALY = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BGM")]
        BGM = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BOX")]
        BOX = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BTV")]
        BTV = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BUF")]
        BUF = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CAE")]
        CAE = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CAR")]
        CAR = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHS")]
        CHS = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLE")]
        CLE = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CTP")]
        CTP = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GSP")]
        GSP = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GYX")]
        GYX = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ILM")]
        ILM = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ILN")]
        ILN = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LWX")]
        LWX = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MHX")]
        MHX = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OKX")]
        OKX = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PBZ")]
        PBZ = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PHI")]
        PHI = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RAH")]
        RAH = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RLX")]
        RLX = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RNK")]
        RNK = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ABQ")]
        ABQ = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AMA")]
        AMA = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BMX")]
        BMX = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BRO")]
        BRO = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CRP")]
        CRP = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EPZ")]
        EPZ = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EWX")]
        EWX = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FFC")]
        FFC = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FWD")]
        FWD = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HGX")]
        HGX = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HUN")]
        HUN = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JAN")]
        JAN = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JAX")]
        JAX = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KEY")]
        KEY = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LCH")]
        LCH = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LIX")]
        LIX = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LUB")]
        LUB = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LZK")]
        LZK = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MAF")]
        MAF = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MEG")]
        MEG = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MFL")]
        MFL = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MLB")]
        MLB = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MOB")]
        MOB = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MRX")]
        MRX = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OHX")]
        OHX = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OUN")]
        OUN = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SHV")]
        SHV = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SJT")]
        SJT = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SJU")]
        SJU = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TAE")]
        TAE = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TBW")]
        TBW = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TSA")]
        TSA = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ABR")]
        ABR = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"APX")]
        APX = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ARX")]
        ARX = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIS")]
        BIS = 58,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BOU")]
        BOU = 59,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CYS")]
        CYS = 60,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DDC")]
        DDC = 61,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DLH")]
        DLH = 62,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DMX")]
        DMX = 63,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DTX")]
        DTX = 64,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DVN")]
        DVN = 65,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EAX")]
        EAX = 66,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FGF")]
        FGF = 67,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FSD")]
        FSD = 68,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GID")]
        GID = 69,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GJT")]
        GJT = 70,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GLD")]
        GLD = 71,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GRB")]
        GRB = 72,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GRR")]
        GRR = 73,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ICT")]
        ICT = 74,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ILX")]
        ILX = 75,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IND")]
        IND = 76,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IWX")]
        IWX = 77,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JKL")]
        JKL = 78,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LBF")]
        LBF = 79,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LMK")]
        LMK = 80,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LOT")]
        LOT = 81,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LSX")]
        LSX = 82,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MKX")]
        MKX = 83,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MPX")]
        MPX = 84,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MQT")]
        MQT = 85,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OAX")]
        OAX = 86,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PAH")]
        PAH = 87,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PUB")]
        PUB = 88,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RIW")]
        RIW = 89,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SGF")]
        SGF = 90,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TOP")]
        TOP = 91,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNR")]
        UNR = 92,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BOI")]
        BOI = 93,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BYZ")]
        BYZ = 94,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EKA")]
        EKA = 95,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FGZ")]
        FGZ = 96,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GGW")]
        GGW = 97,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HNX")]
        HNX = 98,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LKN")]
        LKN = 99,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LOX")]
        LOX = 100,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MFR")]
        MFR = 101,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MSO")]
        MSO = 102,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MTR")]
        MTR = 103,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTX")]
        OTX = 104,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PDT")]
        PDT = 105,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PIH")]
        PIH = 106,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PQR")]
        PQR = 107,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PSR")]
        PSR = 108,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REV")]
        REV = 109,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SEW")]
        SEW = 110,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SGX")]
        SGX = 111,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SLC")]
        SLC = 112,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STO")]
        STO = 113,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TFX")]
        TFX = 114,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TWC")]
        TWC = 115,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VEF")]
        VEF = 116,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AER")]
        AER = 117,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AFC")]
        AFC = 118,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AFG")]
        AFG = 119,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AJK")]
        AJK = 120,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ALU")]
        ALU = 121,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GUM")]
        GUM = 122,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HPA")]
        HPA = 123,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HFO")]
        HFO = 124,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PPG")]
        PPG = 125,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STU")]
        STU = 126,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NH1")]
        NH1 = 127,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NH2")]
        NH2 = 128,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ONA")]
        ONA = 129,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ONP")]
        ONP = 130,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum NWSZoneType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"land")]
        Land = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"marine")]
        Marine = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"forecast")]
        Forecast = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"public")]
        Public = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"coastal")]
        Coastal = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"offshore")]
        Offshore = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fire")]
        Fire = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"county")]
        County = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Observation 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonLdContext Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("geometry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Geometry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ObservationType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("elevation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue Elevation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("station", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Station { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Timestamp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rawMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RawMessage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("textDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TextDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Icon { get; set; }
    
        [Newtonsoft.Json.JsonProperty("presentWeather", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MetarPhenomenon> PresentWeather { get; set; }
    
        [Newtonsoft.Json.JsonProperty("temperature", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue Temperature { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dewpoint", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue Dewpoint { get; set; }
    
        [Newtonsoft.Json.JsonProperty("windDirection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue WindDirection { get; set; }
    
        [Newtonsoft.Json.JsonProperty("windSpeed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue WindSpeed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("windGust", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue WindGust { get; set; }
    
        [Newtonsoft.Json.JsonProperty("barometricPressure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue BarometricPressure { get; set; }
    
        [Newtonsoft.Json.JsonProperty("seaLevelPressure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue SeaLevelPressure { get; set; }
    
        [Newtonsoft.Json.JsonProperty("visibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue Visibility { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maxTemperatureLast24Hours", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue MaxTemperatureLast24Hours { get; set; }
    
        [Newtonsoft.Json.JsonProperty("minTemperatureLast24Hours", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue MinTemperatureLast24Hours { get; set; }
    
        [Newtonsoft.Json.JsonProperty("precipitationLastHour", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue PrecipitationLastHour { get; set; }
    
        [Newtonsoft.Json.JsonProperty("precipitationLast3Hours", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue PrecipitationLast3Hours { get; set; }
    
        [Newtonsoft.Json.JsonProperty("precipitationLast6Hours", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue PrecipitationLast6Hours { get; set; }
    
        [Newtonsoft.Json.JsonProperty("relativeHumidity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue RelativeHumidity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("windChill", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue WindChill { get; set; }
    
        [Newtonsoft.Json.JsonProperty("heatIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue HeatIndex { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cloudLayers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CloudLayers> CloudLayers { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ObservationGeoJson : GeoJsonFeature
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Observation Properties { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ObservationCollectionGeoJson : GeoJsonFeatureCollection
    {
        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Features2> Features { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ObservationCollectionJsonLd 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonLdContext Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@graph", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Observation> Graph { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ObservationStation 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonLdContext Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("geometry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Geometry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ObservationStationType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("elevation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue Elevation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stationIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StationIdentifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeZone { get; set; }
    
        /// <summary>A link to the NWS public forecast zone containing this station.</summary>
        [Newtonsoft.Json.JsonProperty("forecast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Forecast { get; set; }
    
        /// <summary>A link to the NWS county zone containing this station.</summary>
        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri County { get; set; }
    
        /// <summary>A link to the NWS fire weather forecast zone containing this station.</summary>
        [Newtonsoft.Json.JsonProperty("fireWeatherZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri FireWeatherZone { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ObservationStationGeoJson : GeoJsonFeature
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ObservationStation Properties { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ObservationStationJsonLd : ObservationStation
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.Always)]
        public JsonLdContext Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("geometry", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Geometry { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ObservationStationCollectionGeoJson : GeoJsonFeatureCollection
    {
        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Features3> Features { get; set; }
    
        [Newtonsoft.Json.JsonProperty("observationStations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Uri> ObservationStations { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ObservationStationCollectionJsonLd 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonLdContext Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@graph", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ObservationStation> Graph { get; set; }
    
        [Newtonsoft.Json.JsonProperty("observationStations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Uri> ObservationStations { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Office 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonLdContext Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OfficeType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telephone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("faxNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FaxNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sameAs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri SameAs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nwsRegion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NwsRegion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parentOrganization", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri ParentOrganization { get; set; }
    
        [Newtonsoft.Json.JsonProperty("responsibleCounties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Uri> ResponsibleCounties { get; set; }
    
        [Newtonsoft.Json.JsonProperty("responsibleForecastZones", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Uri> ResponsibleForecastZones { get; set; }
    
        [Newtonsoft.Json.JsonProperty("responsibleFireZones", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Uri> ResponsibleFireZones { get; set; }
    
        [Newtonsoft.Json.JsonProperty("approvedObservationStations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Uri> ApprovedObservationStations { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OfficeHeadline 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonLdContext Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("office", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Office { get; set; }
    
        [Newtonsoft.Json.JsonProperty("important", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Important { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issuanceTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset IssuanceTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Link { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Summary { get; set; }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OfficeHeadlineCollection 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.Always)]
        public JsonLdContext Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@graph", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OfficeHeadline> Graph { get; set; } = new System.Collections.ObjectModel.Collection<OfficeHeadline>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Point 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonLdContext Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("geometry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Geometry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PointType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cwa", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NWSForecastOfficeId Cwa { get; set; }
    
        [Newtonsoft.Json.JsonProperty("forecastOffice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri ForecastOffice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gridId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NWSForecastOfficeId GridId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gridX", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int GridX { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gridY", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int GridY { get; set; }
    
        [Newtonsoft.Json.JsonProperty("forecast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Forecast { get; set; }
    
        [Newtonsoft.Json.JsonProperty("forecastHourly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri ForecastHourly { get; set; }
    
        [Newtonsoft.Json.JsonProperty("forecastGridData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri ForecastGridData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("observationStations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri ObservationStations { get; set; }
    
        [Newtonsoft.Json.JsonProperty("relativeLocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelativeLocationGeoJson RelativeLocation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("forecastZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri ForecastZone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri County { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fireWeatherZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri FireWeatherZone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeZone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("radarStation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RadarStation { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PointGeoJson : GeoJsonFeature
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Point Properties { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PointJsonLd : Point
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Point Properties { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Detail about an error. This document conforms to RFC 7807 (Problem Details for HTTP APIs).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProblemDetail 
    {
        /// <summary>A URI reference (RFC 3986) that identifies the problem type. This is only an identifier and is not necessarily a resolvable URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Uri Type { get; set; } = new System.Uri("about:blank");
    
        /// <summary>A short, human-readable summary of the problem type.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }
    
        /// <summary>The HTTP status code (RFC 7231, Section 6) generated by the origin server for this occurrence of the problem.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(100, 999)]
        public double Status { get; set; }
    
        /// <summary>A human-readable explanation specific to this occurrence of the problem.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }
    
        /// <summary>A URI reference (RFC 3986) that identifies the specific occurrence of the problem. This is only an identifier and is not necessarily a resolvable URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Uri Instance { get; set; }
    
        /// <summary>A unique identifier for the request, used for NWS debugging purposes. Please include this identifier with any correspondence to help us investigate your issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("correlationId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CorrelationId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QuantitativeValue 
    {
        /// <summary>A measured value</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }
    
        /// <summary>The maximum value of a range of measured values</summary>
        [Newtonsoft.Json.JsonProperty("maxValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MaxValue { get; set; }
    
        /// <summary>The minimum value of a range of measured values</summary>
        [Newtonsoft.Json.JsonProperty("minValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MinValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("unitCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }
    
        /// <summary>For values in observation records, the quality control flag from the MADIS system. The definitions of these flags can be found at https://madis.ncep.noaa.gov/madis_sfc_qc_notes.shtml
        /// </summary>
        [Newtonsoft.Json.JsonProperty("qualityControl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public QuantitativeValueQualityControl QualityControl { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RelativeLocation 
    {
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue Distance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bearing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantitativeValue Bearing { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RelativeLocationGeoJson : GeoJsonFeature
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelativeLocation Properties { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RelativeLocationJsonLd : RelativeLocation
    {
        [Newtonsoft.Json.JsonProperty("geometry", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Geometry { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TextProduct 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonLdContext Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("wmoCollectiveId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WmoCollectiveId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issuingOffice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssuingOffice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issuanceTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset IssuanceTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("productText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductText { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TextProductCollection 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonLdContext Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@graph", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TextProduct> Graph { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TextProductTypeCollection 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonLdContext Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@graph", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<@graph> Graph { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TextProductLocationCollection 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonLdContext Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("locations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Locations { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Zone 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonLdContext Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("geometry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Geometry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ZoneType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EffectiveDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ExpirationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AreaCode? State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cwa", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<NWSForecastOfficeId> Cwa { get; set; }
    
        [Newtonsoft.Json.JsonProperty("forecastOffices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Uri> ForecastOffices { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> TimeZone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("observationStations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Uri> ObservationStations { get; set; }
    
        [Newtonsoft.Json.JsonProperty("radarStation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RadarStation { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ZoneGeoJson : GeoJsonFeature
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Zone Properties { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ZoneCollectionGeoJson : GeoJsonFeatureCollection
    {
        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Features4> Features { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ZoneCollectionJsonLd 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonLdContext Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@graph", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Zone> Graph { get; set; }
    
    
    }
    
    /// <summary>An object representing a zone area forecast.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ZoneForecast 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonLdContext Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("geometry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Geometry { get; set; }
    
        /// <summary>An API link to the zone this forecast is for.</summary>
        [Newtonsoft.Json.JsonProperty("zone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Zone { get; set; }
    
        /// <summary>The time this zone forecast product was published.</summary>
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }
    
        /// <summary>An array of forecast periods.</summary>
        [Newtonsoft.Json.JsonProperty("periods", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Periods> Periods { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ZoneForecastGeoJson : GeoJsonFeature
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ZoneForecast Properties { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Geocode 
    {
        /// <summary>A list of NWS public zone or county identifiers.</summary>
        [Newtonsoft.Json.JsonProperty("UGC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> UGC { get; set; }
    
        /// <summary>A list of SAME (Specific Area Message Encoding) codes for affected counties.</summary>
        [Newtonsoft.Json.JsonProperty("SAME", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SAME { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class References 
    {
        /// <summary>An API link to the prior alert.</summary>
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }
    
        /// <summary>The sender of the prior alert.</summary>
        [Newtonsoft.Json.JsonProperty("sender", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sender { get; set; }
    
        /// <summary>The time the prior alert was sent.</summary>
        [Newtonsoft.Json.JsonProperty("sent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Sent { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AlertCategory
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Met")]
        Met = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Geo")]
        Geo = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Safety")]
        Safety = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Security")]
        Security = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rescue")]
        Rescue = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fire")]
        Fire = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Health")]
        Health = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Env")]
        Env = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Transport")]
        Transport = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Infra")]
        Infra = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CBRNE")]
        CBRNE = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 11,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AlertResponse
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Shelter")]
        Shelter = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Evacuate")]
        Evacuate = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Prepare")]
        Prepare = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Execute")]
        Execute = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Avoid")]
        Avoid = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Monitor")]
        Monitor = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Assess")]
        Assess = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AllClear")]
        AllClear = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Pagination 
    {
        /// <summary>A link to the next set of alerts</summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Uri Next { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Features 
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Alert Properties { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Author 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Author2 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum GeoJsonGeometryType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Point")]
        Point = 0,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum GeoJsonFeatureType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Feature")]
        Feature = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum GeoJsonFeatureCollectionType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"FeatureCollection")]
        FeatureCollection = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum GridpointType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"wx:Gridpoint")]
        WxGridpoint = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Weather 
    {
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Values2> Values { get; set; } = new System.Collections.ObjectModel.Collection<Values2>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Hazards 
    {
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Values3> Values { get; set; } = new System.Collections.ObjectModel.Collection<Values3>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Values 
    {
        [Newtonsoft.Json.JsonProperty("validTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ValidTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.AllowNull)]
        public double? Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum GridpointForecastPeriodTemperatureUnit
    {
        [System.Runtime.Serialization.EnumMember(Value = @"F")]
        F = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"C")]
        C = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum GridpointForecastPeriodTemperatureTrend
    {
        [System.Runtime.Serialization.EnumMember(Value = @"rising")]
        Rising = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"falling")]
        Falling = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum GridpointForecastPeriodWindDirection
    {
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NNE")]
        NNE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NE")]
        NE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ENE")]
        ENE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ESE")]
        ESE = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SE")]
        SE = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SSE")]
        SSE = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SSW")]
        SSW = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SW")]
        SW = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WSW")]
        WSW = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"W")]
        W = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WNW")]
        WNW = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NW")]
        NW = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NNW")]
        NNW = 15,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MetarPhenomenonIntensity
    {
        [System.Runtime.Serialization.EnumMember(Value = @"light")]
        Light = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"heavy")]
        Heavy = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MetarPhenomenonModifier
    {
        [System.Runtime.Serialization.EnumMember(Value = @"patches")]
        Patches = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"blowing")]
        Blowing = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"low_drifting")]
        Low_drifting = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"freezing")]
        Freezing = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"shallow")]
        Shallow = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"partial")]
        Partial = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"showers")]
        Showers = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MetarPhenomenonWeather
    {
        [System.Runtime.Serialization.EnumMember(Value = @"fog_mist")]
        Fog_mist = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dust_storm")]
        Dust_storm = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dust")]
        Dust = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"drizzle")]
        Drizzle = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"funnel_cloud")]
        Funnel_cloud = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fog")]
        Fog = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"smoke")]
        Smoke = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hail")]
        Hail = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"snow_pellets")]
        Snow_pellets = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"haze")]
        Haze = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ice_crystals")]
        Ice_crystals = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ice_pellets")]
        Ice_pellets = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dust_whirls")]
        Dust_whirls = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"spray")]
        Spray = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"rain")]
        Rain = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sand")]
        Sand = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"snow_grains")]
        Snow_grains = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"snow")]
        Snow = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"squalls")]
        Squalls = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sand_storm")]
        Sand_storm = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"thunderstorms")]
        Thunderstorms = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"volcanic_ash")]
        Volcanic_ash = 22,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ObservationType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"wx:ObservationStation")]
        WxObservationStation = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CloudLayers 
    {
        [Newtonsoft.Json.JsonProperty("base", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public QuantitativeValue Base { get; set; } = new QuantitativeValue();
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MetarSkyCoverage Amount { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Features2 
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Observation Properties { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ObservationStationType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"wx:ObservationStation")]
        WxObservationStation = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Features3 
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ObservationStation Properties { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OfficeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"GovernmentOrganization")]
        GovernmentOrganization = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Address 
    {
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AddressType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("streetAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("addressLocality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLocality { get; set; }
    
        [Newtonsoft.Json.JsonProperty("addressRegion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressRegion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PointType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"wx:Point")]
        WxPoint = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum QuantitativeValueQualityControl
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Z")]
        Z = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"C")]
        C = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"V")]
        V = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X")]
        X = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Q")]
        Q = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"G")]
        G = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"B")]
        B = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"T")]
        T = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class @graph 
    {
        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductName { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ZoneType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"wx:Zone")]
        WxZone = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Features4 
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Zone Properties { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Periods 
    {
        /// <summary>A sequential identifier number.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
        public int Number { get; set; }
    
        /// <summary>A textual description of the period.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        /// <summary>A detailed textual forecast for the period.</summary>
        [Newtonsoft.Json.JsonProperty("detailedForecast", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DetailedForecast { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Values2 
    {
        [Newtonsoft.Json.JsonProperty("validTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ValidTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Value> Value { get; set; } = new System.Collections.ObjectModel.Collection<Value>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Values3 
    {
        [Newtonsoft.Json.JsonProperty("validTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ValidTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Value2> Value { get; set; } = new System.Collections.ObjectModel.Collection<Value2>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AddressType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PostalAddress")]
        PostalAddress = 0,
    
    }
    
    /// <summary>A value object representing expected weather phenomena.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Value 
    {
        [Newtonsoft.Json.JsonProperty("coverage", Required = Newtonsoft.Json.Required.AllowNull)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ValueCoverage? Coverage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weather", Required = Newtonsoft.Json.Required.AllowNull)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ValueWeather? Weather { get; set; }
    
        [Newtonsoft.Json.JsonProperty("intensity", Required = Newtonsoft.Json.Required.AllowNull)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ValueIntensity? Intensity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("visibility", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public QuantitativeValue Visibility { get; set; } = new QuantitativeValue();
    
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Attributes> Attributes { get; set; } = new System.Collections.ObjectModel.Collection<Attributes>();
    
    
    }
    
    /// <summary>A value object representing an expected hazard.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Value2 
    {
        /// <summary>Hazard code. This value will correspond to a P-VTEC phenomenon code as defined in NWS Directive 10-1703.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phenomenon", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{2}$")]
        public string Phenomenon { get; set; }
    
        /// <summary>Significance code. This value will correspond to a P-VTEC significance code as defined in NWS Directive 10-1703.
        /// This will most frequently be "A" for a watch or "Y" for an advisory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("significance", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w$")]
        public string Significance { get; set; }
    
        /// <summary>Event number. If this hazard refers to a national or regional center product (such as a Storm Prediction Center convective watch), this value will be the sequence number of that product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("event_number", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Event_number { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ValueCoverage
    {
        [System.Runtime.Serialization.EnumMember(Value = @"areas")]
        Areas = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"brief")]
        Brief = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"chance")]
        Chance = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"definite")]
        Definite = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"few")]
        Few = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"frequent")]
        Frequent = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"intermittent")]
        Intermittent = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"isolated")]
        Isolated = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"likely")]
        Likely = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"numerous")]
        Numerous = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"occasional")]
        Occasional = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"patchy")]
        Patchy = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"periods")]
        Periods = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"scattered")]
        Scattered = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"slight_chance")]
        Slight_chance = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"widespread")]
        Widespread = 15,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ValueWeather
    {
        [System.Runtime.Serialization.EnumMember(Value = @"blowing_dust")]
        Blowing_dust = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"blowing_sand")]
        Blowing_sand = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"blowing_snow")]
        Blowing_snow = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"drizzle")]
        Drizzle = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fog")]
        Fog = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"freezing_fog")]
        Freezing_fog = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"freezing_drizzle")]
        Freezing_drizzle = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"freezing_rain")]
        Freezing_rain = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"freezing_spray")]
        Freezing_spray = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"frost")]
        Frost = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hail")]
        Hail = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"haze")]
        Haze = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ice_crystals")]
        Ice_crystals = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ice_fog")]
        Ice_fog = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"rain")]
        Rain = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"rain_showers")]
        Rain_showers = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sleet")]
        Sleet = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"smoke")]
        Smoke = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"snow")]
        Snow = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"snow_showers")]
        Snow_showers = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"thunderstorms")]
        Thunderstorms = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"volcanic_ash")]
        Volcanic_ash = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"water_spouts")]
        Water_spouts = 22,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ValueIntensity
    {
        [System.Runtime.Serialization.EnumMember(Value = @"very_light")]
        Very_light = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"light")]
        Light = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"moderate")]
        Moderate = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"heavy")]
        Heavy = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Attributes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"damaging_wind")]
        Damaging_wind = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dry_thunderstorms")]
        Dry_thunderstorms = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"flooding")]
        Flooding = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"gusty_wind")]
        Gusty_wind = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"heavy_rain")]
        Heavy_rain = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"large_hail")]
        Large_hail = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"small_hail")]
        Small_hail = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tornadoes")]
        Tornadoes = 7,
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
